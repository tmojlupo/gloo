/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/solo-io/gloo/projects/gateway/pkg/api/v1/kube/apis/gateway.solo.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RouteOptionLister helps list RouteOptions.
// All objects returned here must be treated as read-only.
type RouteOptionLister interface {
	// List lists all RouteOptions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.RouteOption, err error)
	// RouteOptions returns an object that can list and get RouteOptions.
	RouteOptions(namespace string) RouteOptionNamespaceLister
	RouteOptionListerExpansion
}

// routeOptionLister implements the RouteOptionLister interface.
type routeOptionLister struct {
	indexer cache.Indexer
}

// NewRouteOptionLister returns a new RouteOptionLister.
func NewRouteOptionLister(indexer cache.Indexer) RouteOptionLister {
	return &routeOptionLister{indexer: indexer}
}

// List lists all RouteOptions in the indexer.
func (s *routeOptionLister) List(selector labels.Selector) (ret []*v1.RouteOption, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RouteOption))
	})
	return ret, err
}

// RouteOptions returns an object that can list and get RouteOptions.
func (s *routeOptionLister) RouteOptions(namespace string) RouteOptionNamespaceLister {
	return routeOptionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RouteOptionNamespaceLister helps list and get RouteOptions.
// All objects returned here must be treated as read-only.
type RouteOptionNamespaceLister interface {
	// List lists all RouteOptions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.RouteOption, err error)
	// Get retrieves the RouteOption from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.RouteOption, error)
	RouteOptionNamespaceListerExpansion
}

// routeOptionNamespaceLister implements the RouteOptionNamespaceLister
// interface.
type routeOptionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RouteOptions in the indexer for a given namespace.
func (s routeOptionNamespaceLister) List(selector labels.Selector) (ret []*v1.RouteOption, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RouteOption))
	})
	return ret, err
}

// Get retrieves the RouteOption from the indexer for a given namespace and name.
func (s routeOptionNamespaceLister) Get(name string) (*v1.RouteOption, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("routeoption"), name)
	}
	return obj.(*v1.RouteOption), nil
}
