// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"log"
	"sort"

	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

func NewVirtualHostOption(namespace, name string) *VirtualHostOption {
	virtualhostoption := &VirtualHostOption{}
	virtualhostoption.SetMetadata(&core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return virtualhostoption
}

func (r *VirtualHostOption) SetMetadata(meta *core.Metadata) {
	r.Metadata = meta
}

func (r *VirtualHostOption) SetStatus(status *core.Status) {
	r.Status = status
}

func (r *VirtualHostOption) MustHash() uint64 {
	hashVal, err := r.Hash(nil)
	if err != nil {
		log.Panicf("error while hashing: (%s) this should never happen", err)
	}
	return hashVal
}

func (r *VirtualHostOption) GroupVersionKind() schema.GroupVersionKind {
	return VirtualHostOptionGVK
}

type VirtualHostOptionList []*VirtualHostOption

func (list VirtualHostOptionList) Find(namespace, name string) (*VirtualHostOption, error) {
	for _, virtualHostOption := range list {
		if virtualHostOption.GetMetadata().Name == name && virtualHostOption.GetMetadata().Namespace == namespace {
			return virtualHostOption, nil
		}
	}
	return nil, errors.Errorf("list did not find virtualHostOption %v.%v", namespace, name)
}

func (list VirtualHostOptionList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, virtualHostOption := range list {
		ress = append(ress, virtualHostOption)
	}
	return ress
}

func (list VirtualHostOptionList) AsInputResources() resources.InputResourceList {
	var ress resources.InputResourceList
	for _, virtualHostOption := range list {
		ress = append(ress, virtualHostOption)
	}
	return ress
}

func (list VirtualHostOptionList) Names() []string {
	var names []string
	for _, virtualHostOption := range list {
		names = append(names, virtualHostOption.GetMetadata().Name)
	}
	return names
}

func (list VirtualHostOptionList) NamespacesDotNames() []string {
	var names []string
	for _, virtualHostOption := range list {
		names = append(names, virtualHostOption.GetMetadata().Namespace+"."+virtualHostOption.GetMetadata().Name)
	}
	return names
}

func (list VirtualHostOptionList) Sort() VirtualHostOptionList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list VirtualHostOptionList) Clone() VirtualHostOptionList {
	var virtualHostOptionList VirtualHostOptionList
	for _, virtualHostOption := range list {
		virtualHostOptionList = append(virtualHostOptionList, resources.Clone(virtualHostOption).(*VirtualHostOption))
	}
	return virtualHostOptionList
}

func (list VirtualHostOptionList) Each(f func(element *VirtualHostOption)) {
	for _, virtualHostOption := range list {
		f(virtualHostOption)
	}
}

func (list VirtualHostOptionList) EachResource(f func(element resources.Resource)) {
	for _, virtualHostOption := range list {
		f(virtualHostOption)
	}
}

func (list VirtualHostOptionList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *VirtualHostOption) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

// Kubernetes Adapter for VirtualHostOption

func (o *VirtualHostOption) GetObjectKind() schema.ObjectKind {
	t := VirtualHostOptionCrd.TypeMeta()
	return &t
}

func (o *VirtualHostOption) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*VirtualHostOption)
}

func (o *VirtualHostOption) DeepCopyInto(out *VirtualHostOption) {
	clone := resources.Clone(o).(*VirtualHostOption)
	*out = *clone
}

var (
	VirtualHostOptionCrd = crd.NewCrd(
		"virtualhostoptions",
		VirtualHostOptionGVK.Group,
		VirtualHostOptionGVK.Version,
		VirtualHostOptionGVK.Kind,
		"vhopts",
		false,
		&VirtualHostOption{})
)

var (
	VirtualHostOptionGVK = schema.GroupVersionKind{
		Version: "v1",
		Group:   "gateway.solo.io",
		Kind:    "VirtualHostOption",
	}
)
