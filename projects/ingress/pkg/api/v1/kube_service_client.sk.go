// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"context"

	"github.com/solo-io/solo-kit/pkg/api/v1/clients"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/factory"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/errors"
)

type KubeServiceWatcher interface {
	// watch namespace-scoped Services
	Watch(namespace string, opts clients.WatchOpts) (<-chan KubeServiceList, <-chan error, error)
}

type KubeServiceClient interface {
	BaseClient() clients.ResourceClient
	Register() error
	Read(namespace, name string, opts clients.ReadOpts) (*KubeService, error)
	Write(resource *KubeService, opts clients.WriteOpts) (*KubeService, error)
	Delete(namespace, name string, opts clients.DeleteOpts) error
	List(namespace string, opts clients.ListOpts) (KubeServiceList, error)
	KubeServiceWatcher
}

type kubeServiceClient struct {
	rc clients.ResourceClient
}

func NewKubeServiceClient(ctx context.Context, rcFactory factory.ResourceClientFactory) (KubeServiceClient, error) {
	return NewKubeServiceClientWithToken(ctx, rcFactory, "")
}

func NewKubeServiceClientWithToken(ctx context.Context, rcFactory factory.ResourceClientFactory, token string) (KubeServiceClient, error) {
	rc, err := rcFactory.NewResourceClient(ctx, factory.NewResourceClientParams{
		ResourceType: &KubeService{},
		Token:        token,
	})
	if err != nil {
		return nil, errors.Wrapf(err, "creating base KubeService resource client")
	}
	return NewKubeServiceClientWithBase(rc), nil
}

func NewKubeServiceClientWithBase(rc clients.ResourceClient) KubeServiceClient {
	return &kubeServiceClient{
		rc: rc,
	}
}

func (client *kubeServiceClient) BaseClient() clients.ResourceClient {
	return client.rc
}

func (client *kubeServiceClient) Register() error {
	return client.rc.Register()
}

func (client *kubeServiceClient) Read(namespace, name string, opts clients.ReadOpts) (*KubeService, error) {
	opts = opts.WithDefaults()

	resource, err := client.rc.Read(namespace, name, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*KubeService), nil
}

func (client *kubeServiceClient) Write(kubeService *KubeService, opts clients.WriteOpts) (*KubeService, error) {
	opts = opts.WithDefaults()
	resource, err := client.rc.Write(kubeService, opts)
	if err != nil {
		return nil, err
	}
	return resource.(*KubeService), nil
}

func (client *kubeServiceClient) Delete(namespace, name string, opts clients.DeleteOpts) error {
	opts = opts.WithDefaults()

	return client.rc.Delete(namespace, name, opts)
}

func (client *kubeServiceClient) List(namespace string, opts clients.ListOpts) (KubeServiceList, error) {
	opts = opts.WithDefaults()

	resourceList, err := client.rc.List(namespace, opts)
	if err != nil {
		return nil, err
	}
	return convertToKubeService(resourceList), nil
}

func (client *kubeServiceClient) Watch(namespace string, opts clients.WatchOpts) (<-chan KubeServiceList, <-chan error, error) {
	opts = opts.WithDefaults()

	resourcesChan, errs, initErr := client.rc.Watch(namespace, opts)
	if initErr != nil {
		return nil, nil, initErr
	}
	servicesChan := make(chan KubeServiceList)
	go func() {
		for {
			select {
			case resourceList := <-resourcesChan:
				select {
				case servicesChan <- convertToKubeService(resourceList):
				case <-opts.Ctx.Done():
					close(servicesChan)
					return
				}
			case <-opts.Ctx.Done():
				close(servicesChan)
				return
			}
		}
	}()
	return servicesChan, errs, nil
}

func convertToKubeService(resources resources.ResourceList) KubeServiceList {
	var kubeServiceList KubeServiceList
	for _, resource := range resources {
		kubeServiceList = append(kubeServiceList, resource.(*KubeService))
	}
	return kubeServiceList
}
