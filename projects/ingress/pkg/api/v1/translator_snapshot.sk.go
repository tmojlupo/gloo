// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"fmt"
	"hash"
	"hash/fnv"
	"log"

	gloo_solo_io "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"

	"github.com/rotisserie/eris"
	"github.com/solo-io/go-utils/hashutils"
	"go.uber.org/zap"
)

type TranslatorSnapshot struct {
	Upstreams gloo_solo_io.UpstreamList
	Services  KubeServiceList
	Ingresses IngressList
}

func (s TranslatorSnapshot) Clone() TranslatorSnapshot {
	return TranslatorSnapshot{
		Upstreams: s.Upstreams.Clone(),
		Services:  s.Services.Clone(),
		Ingresses: s.Ingresses.Clone(),
	}
}

func (s TranslatorSnapshot) Hash(hasher hash.Hash64) (uint64, error) {
	if hasher == nil {
		hasher = fnv.New64()
	}
	if _, err := s.hashUpstreams(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashServices(hasher); err != nil {
		return 0, err
	}
	if _, err := s.hashIngresses(hasher); err != nil {
		return 0, err
	}
	return hasher.Sum64(), nil
}

func (s TranslatorSnapshot) hashUpstreams(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Upstreams.AsInterfaces()...)
}

func (s TranslatorSnapshot) hashServices(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Services.AsInterfaces()...)
}

func (s TranslatorSnapshot) hashIngresses(hasher hash.Hash64) (uint64, error) {
	return hashutils.HashAllSafe(hasher, s.Ingresses.AsInterfaces()...)
}

func (s TranslatorSnapshot) HashFields() []zap.Field {
	var fields []zap.Field
	hasher := fnv.New64()
	UpstreamsHash, err := s.hashUpstreams(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("upstreams", UpstreamsHash))
	ServicesHash, err := s.hashServices(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("services", ServicesHash))
	IngressesHash, err := s.hashIngresses(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	fields = append(fields, zap.Uint64("ingresses", IngressesHash))
	snapshotHash, err := s.Hash(hasher)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	return append(fields, zap.Uint64("snapshotHash", snapshotHash))
}

type TranslatorSnapshotStringer struct {
	Version   uint64
	Upstreams []string
	Services  []string
	Ingresses []string
}

func (ss TranslatorSnapshotStringer) String() string {
	s := fmt.Sprintf("TranslatorSnapshot %v\n", ss.Version)

	s += fmt.Sprintf("  Upstreams %v\n", len(ss.Upstreams))
	for _, name := range ss.Upstreams {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Services %v\n", len(ss.Services))
	for _, name := range ss.Services {
		s += fmt.Sprintf("    %v\n", name)
	}

	s += fmt.Sprintf("  Ingresses %v\n", len(ss.Ingresses))
	for _, name := range ss.Ingresses {
		s += fmt.Sprintf("    %v\n", name)
	}

	return s
}

func (s TranslatorSnapshot) Stringer() TranslatorSnapshotStringer {
	snapshotHash, err := s.Hash(nil)
	if err != nil {
		log.Println(eris.Wrapf(err, "error hashing, this should never happen"))
	}
	return TranslatorSnapshotStringer{
		Version:   snapshotHash,
		Upstreams: s.Upstreams.NamespacesDotNames(),
		Services:  s.Services.NamespacesDotNames(),
		Ingresses: s.Ingresses.NamespacesDotNames(),
	}
}
