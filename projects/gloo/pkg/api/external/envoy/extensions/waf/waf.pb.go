// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/waf/waf.proto

package waf

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AuditLogging_AuditLogAction int32

const (
	// Never generate audit logs.
	AuditLogging_NEVER AuditLogging_AuditLogAction = 0
	// When set to RELEVANT_ONLY, this will have similar behavior to `SecAuditEngine RelevantOnly`.
	AuditLogging_RELEVANT_ONLY AuditLogging_AuditLogAction = 1
	// Always generate an audit log entry (as long as the filter is not disabled).
	AuditLogging_ALWAYS AuditLogging_AuditLogAction = 2
)

var AuditLogging_AuditLogAction_name = map[int32]string{
	0: "NEVER",
	1: "RELEVANT_ONLY",
	2: "ALWAYS",
}

var AuditLogging_AuditLogAction_value = map[string]int32{
	"NEVER":         0,
	"RELEVANT_ONLY": 1,
	"ALWAYS":        2,
}

func (x AuditLogging_AuditLogAction) String() string {
	return proto.EnumName(AuditLogging_AuditLogAction_name, int32(x))
}

func (AuditLogging_AuditLogAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_aaf8967e7dbe03c2, []int{0, 0}
}

type AuditLogging_AuditLogLocation int32

const (
	// Add the audit log to the filter state.
	// it will be under the key "io.solo.modsecurity.audit_log".
	// You can use this formatter in the access log:
	// %FILTER_STATE(io.solo.modsecurity.audit_log)%
	AuditLogging_FILTER_STATE AuditLogging_AuditLogLocation = 0
	// Add the audit log to the dynamic metadata.
	// it will be under the filter name "io.solo.filters.http.modsecurity". with "audit_log" as the
	// key. You can use this formatter in the access log:
	// %DYNAMIC_METADATA("io.solo.filters.http.modsecurity:audit_log")%
	AuditLogging_DYNAMIC_METADATA AuditLogging_AuditLogLocation = 1
)

var AuditLogging_AuditLogLocation_name = map[int32]string{
	0: "FILTER_STATE",
	1: "DYNAMIC_METADATA",
}

var AuditLogging_AuditLogLocation_value = map[string]int32{
	"FILTER_STATE":     0,
	"DYNAMIC_METADATA": 1,
}

func (x AuditLogging_AuditLogLocation) String() string {
	return proto.EnumName(AuditLogging_AuditLogLocation_name, int32(x))
}

func (AuditLogging_AuditLogLocation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_aaf8967e7dbe03c2, []int{0, 1}
}

type AuditLogging struct {
	Action               AuditLogging_AuditLogAction   `protobuf:"varint,1,opt,name=action,proto3,enum=envoy.config.filter.http.modsecurity.v2.AuditLogging_AuditLogAction" json:"action,omitempty"`
	Location             AuditLogging_AuditLogLocation `protobuf:"varint,2,opt,name=location,proto3,enum=envoy.config.filter.http.modsecurity.v2.AuditLogging_AuditLogLocation" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *AuditLogging) Reset()         { *m = AuditLogging{} }
func (m *AuditLogging) String() string { return proto.CompactTextString(m) }
func (*AuditLogging) ProtoMessage()    {}
func (*AuditLogging) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf8967e7dbe03c2, []int{0}
}
func (m *AuditLogging) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuditLogging.Unmarshal(m, b)
}
func (m *AuditLogging) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuditLogging.Marshal(b, m, deterministic)
}
func (m *AuditLogging) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuditLogging.Merge(m, src)
}
func (m *AuditLogging) XXX_Size() int {
	return xxx_messageInfo_AuditLogging.Size(m)
}
func (m *AuditLogging) XXX_DiscardUnknown() {
	xxx_messageInfo_AuditLogging.DiscardUnknown(m)
}

var xxx_messageInfo_AuditLogging proto.InternalMessageInfo

func (m *AuditLogging) GetAction() AuditLogging_AuditLogAction {
	if m != nil {
		return m.Action
	}
	return AuditLogging_NEVER
}

func (m *AuditLogging) GetLocation() AuditLogging_AuditLogLocation {
	if m != nil {
		return m.Location
	}
	return AuditLogging_FILTER_STATE
}

type ModSecurity struct {
	// Disable all rules on the current route
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Global rule sets for the current http connection manager
	RuleSets []*RuleSet `protobuf:"bytes,2,rep,name=rule_sets,json=ruleSets,proto3" json:"rule_sets,omitempty"`
	// Custom message to display when an intervention occurs
	CustomInterventionMessage string `protobuf:"bytes,3,opt,name=custom_intervention_message,json=customInterventionMessage,proto3" json:"custom_intervention_message,omitempty"`
	// This instructs the filter what to do with the transaction's audit log.
	AuditLogging *AuditLogging `protobuf:"bytes,5,opt,name=audit_logging,json=auditLogging,proto3" json:"audit_logging,omitempty"`
	// If set, the body will not be buffered and fed to ModSecurity. Only the headers will.
	// This can help improve performance.
	RequestHeadersOnly  bool `protobuf:"varint,6,opt,name=request_headers_only,json=requestHeadersOnly,proto3" json:"request_headers_only,omitempty"`
	ResponseHeadersOnly bool `protobuf:"varint,7,opt,name=response_headers_only,json=responseHeadersOnly,proto3" json:"response_headers_only,omitempty"`
	// log in a format suited for the OWASP regression tests.
	// this format is a multiline log format, so it is disabled for regular use.
	// do not enable this in production!
	RegressionLogs       bool     `protobuf:"varint,4,opt,name=regression_logs,json=regressionLogs,proto3" json:"regression_logs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModSecurity) Reset()         { *m = ModSecurity{} }
func (m *ModSecurity) String() string { return proto.CompactTextString(m) }
func (*ModSecurity) ProtoMessage()    {}
func (*ModSecurity) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf8967e7dbe03c2, []int{1}
}
func (m *ModSecurity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ModSecurity.Unmarshal(m, b)
}
func (m *ModSecurity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ModSecurity.Marshal(b, m, deterministic)
}
func (m *ModSecurity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModSecurity.Merge(m, src)
}
func (m *ModSecurity) XXX_Size() int {
	return xxx_messageInfo_ModSecurity.Size(m)
}
func (m *ModSecurity) XXX_DiscardUnknown() {
	xxx_messageInfo_ModSecurity.DiscardUnknown(m)
}

var xxx_messageInfo_ModSecurity proto.InternalMessageInfo

func (m *ModSecurity) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *ModSecurity) GetRuleSets() []*RuleSet {
	if m != nil {
		return m.RuleSets
	}
	return nil
}

func (m *ModSecurity) GetCustomInterventionMessage() string {
	if m != nil {
		return m.CustomInterventionMessage
	}
	return ""
}

func (m *ModSecurity) GetAuditLogging() *AuditLogging {
	if m != nil {
		return m.AuditLogging
	}
	return nil
}

func (m *ModSecurity) GetRequestHeadersOnly() bool {
	if m != nil {
		return m.RequestHeadersOnly
	}
	return false
}

func (m *ModSecurity) GetResponseHeadersOnly() bool {
	if m != nil {
		return m.ResponseHeadersOnly
	}
	return false
}

func (m *ModSecurity) GetRegressionLogs() bool {
	if m != nil {
		return m.RegressionLogs
	}
	return false
}

type RuleSet struct {
	// String of rules which are added directly
	RuleStr string `protobuf:"bytes,1,opt,name=rule_str,json=ruleStr,proto3" json:"rule_str,omitempty"`
	// Array of files to include
	Files []string `protobuf:"bytes,3,rep,name=files,proto3" json:"files,omitempty"`
	// A directory to include. all *.conf files in this directory will be
	// included. sub directories will NOT be checked.
	Directory            string   `protobuf:"bytes,4,opt,name=directory,proto3" json:"directory,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RuleSet) Reset()         { *m = RuleSet{} }
func (m *RuleSet) String() string { return proto.CompactTextString(m) }
func (*RuleSet) ProtoMessage()    {}
func (*RuleSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf8967e7dbe03c2, []int{2}
}
func (m *RuleSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RuleSet.Unmarshal(m, b)
}
func (m *RuleSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RuleSet.Marshal(b, m, deterministic)
}
func (m *RuleSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuleSet.Merge(m, src)
}
func (m *RuleSet) XXX_Size() int {
	return xxx_messageInfo_RuleSet.Size(m)
}
func (m *RuleSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RuleSet.DiscardUnknown(m)
}

var xxx_messageInfo_RuleSet proto.InternalMessageInfo

func (m *RuleSet) GetRuleStr() string {
	if m != nil {
		return m.RuleStr
	}
	return ""
}

func (m *RuleSet) GetFiles() []string {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *RuleSet) GetDirectory() string {
	if m != nil {
		return m.Directory
	}
	return ""
}

type ModSecurityPerRoute struct {
	// Disable all rules on the current route
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Overwrite the global rules on this route
	RuleSets []*RuleSet `protobuf:"bytes,2,rep,name=rule_sets,json=ruleSets,proto3" json:"rule_sets,omitempty"`
	// Custom message to display when an intervention occurs
	CustomInterventionMessage string `protobuf:"bytes,3,opt,name=custom_intervention_message,json=customInterventionMessage,proto3" json:"custom_intervention_message,omitempty"`
	// This instructs the filter what to do with the transaction's audit log.
	AuditLogging *AuditLogging `protobuf:"bytes,5,opt,name=audit_logging,json=auditLogging,proto3" json:"audit_logging,omitempty"`
	// If set, the body will not be buffered and fed to ModSecurity. Only the headers will.
	// This can help improve performance.
	RequestHeadersOnly   bool     `protobuf:"varint,6,opt,name=request_headers_only,json=requestHeadersOnly,proto3" json:"request_headers_only,omitempty"`
	ResponseHeadersOnly  bool     `protobuf:"varint,7,opt,name=response_headers_only,json=responseHeadersOnly,proto3" json:"response_headers_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModSecurityPerRoute) Reset()         { *m = ModSecurityPerRoute{} }
func (m *ModSecurityPerRoute) String() string { return proto.CompactTextString(m) }
func (*ModSecurityPerRoute) ProtoMessage()    {}
func (*ModSecurityPerRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_aaf8967e7dbe03c2, []int{3}
}
func (m *ModSecurityPerRoute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ModSecurityPerRoute.Unmarshal(m, b)
}
func (m *ModSecurityPerRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ModSecurityPerRoute.Marshal(b, m, deterministic)
}
func (m *ModSecurityPerRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModSecurityPerRoute.Merge(m, src)
}
func (m *ModSecurityPerRoute) XXX_Size() int {
	return xxx_messageInfo_ModSecurityPerRoute.Size(m)
}
func (m *ModSecurityPerRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_ModSecurityPerRoute.DiscardUnknown(m)
}

var xxx_messageInfo_ModSecurityPerRoute proto.InternalMessageInfo

func (m *ModSecurityPerRoute) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *ModSecurityPerRoute) GetRuleSets() []*RuleSet {
	if m != nil {
		return m.RuleSets
	}
	return nil
}

func (m *ModSecurityPerRoute) GetCustomInterventionMessage() string {
	if m != nil {
		return m.CustomInterventionMessage
	}
	return ""
}

func (m *ModSecurityPerRoute) GetAuditLogging() *AuditLogging {
	if m != nil {
		return m.AuditLogging
	}
	return nil
}

func (m *ModSecurityPerRoute) GetRequestHeadersOnly() bool {
	if m != nil {
		return m.RequestHeadersOnly
	}
	return false
}

func (m *ModSecurityPerRoute) GetResponseHeadersOnly() bool {
	if m != nil {
		return m.ResponseHeadersOnly
	}
	return false
}

func init() {
	proto.RegisterEnum("envoy.config.filter.http.modsecurity.v2.AuditLogging_AuditLogAction", AuditLogging_AuditLogAction_name, AuditLogging_AuditLogAction_value)
	proto.RegisterEnum("envoy.config.filter.http.modsecurity.v2.AuditLogging_AuditLogLocation", AuditLogging_AuditLogLocation_name, AuditLogging_AuditLogLocation_value)
	proto.RegisterType((*AuditLogging)(nil), "envoy.config.filter.http.modsecurity.v2.AuditLogging")
	proto.RegisterType((*ModSecurity)(nil), "envoy.config.filter.http.modsecurity.v2.ModSecurity")
	proto.RegisterType((*RuleSet)(nil), "envoy.config.filter.http.modsecurity.v2.RuleSet")
	proto.RegisterType((*ModSecurityPerRoute)(nil), "envoy.config.filter.http.modsecurity.v2.ModSecurityPerRoute")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/waf/waf.proto", fileDescriptor_aaf8967e7dbe03c2)
}

var fileDescriptor_aaf8967e7dbe03c2 = []byte{
	// 595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x94, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xc7, 0xeb, 0xe4, 0xd7, 0x34, 0xde, 0xfe, 0xf9, 0x99, 0x6d, 0x90, 0xdc, 0x82, 0x50, 0x94,
	0x4b, 0x73, 0xc1, 0xae, 0x82, 0xb8, 0xf4, 0x80, 0x64, 0xa8, 0x2b, 0x2a, 0x9c, 0x94, 0x6e, 0xa2,
	0x42, 0x2b, 0x24, 0xcb, 0xb1, 0x27, 0xee, 0x82, 0xe3, 0x09, 0xbb, 0xeb, 0x42, 0xae, 0xbc, 0x0a,
	0x17, 0x1e, 0x85, 0xe7, 0xe0, 0x49, 0x50, 0xd6, 0xa1, 0x4d, 0xb9, 0x10, 0x81, 0xc4, 0x89, 0x83,
	0xa5, 0x9d, 0x9d, 0x99, 0xcf, 0xee, 0x7e, 0x67, 0x3c, 0xe4, 0x34, 0xe5, 0xea, 0xb2, 0x18, 0x3a,
	0x31, 0x8e, 0x5d, 0x89, 0x19, 0x3e, 0xe4, 0xe8, 0xa6, 0x19, 0xa2, 0x3b, 0x11, 0xf8, 0x16, 0x62,
	0x25, 0x4b, 0x2b, 0x9a, 0x70, 0x17, 0x3e, 0x2a, 0x10, 0x79, 0x94, 0xb9, 0x90, 0x5f, 0xe1, 0x54,
	0x9b, 0xb9, 0xe4, 0x98, 0x4b, 0xf7, 0x43, 0x34, 0x9a, 0x7d, 0xce, 0x44, 0xa0, 0x42, 0xba, 0xa7,
	0xfd, 0x4e, 0x8c, 0xf9, 0x88, 0xa7, 0xce, 0x88, 0x67, 0x0a, 0x84, 0x73, 0xa9, 0xd4, 0xc4, 0x19,
	0x63, 0x22, 0x21, 0x2e, 0x04, 0x57, 0x53, 0xe7, 0xaa, 0xb3, 0xdb, 0x48, 0x31, 0x45, 0x9d, 0xe3,
	0xce, 0x56, 0x65, 0x7a, 0xeb, 0x6b, 0x85, 0x6c, 0x78, 0x45, 0xc2, 0x55, 0x80, 0x69, 0xca, 0xf3,
	0x94, 0xbe, 0x21, 0xb5, 0x28, 0x56, 0x1c, 0x73, 0xdb, 0x68, 0x1a, 0xed, 0xad, 0xce, 0xa1, 0xb3,
	0xe4, 0x01, 0xce, 0x22, 0xe6, 0xda, 0xf0, 0x34, 0x8b, 0xcd, 0x99, 0x74, 0x48, 0xea, 0x19, 0xc6,
	0x91, 0xe6, 0x57, 0x34, 0xff, 0xe8, 0xcf, 0xf8, 0xc1, 0x9c, 0xc6, 0xae, 0xb9, 0xad, 0x03, 0xb2,
	0x75, 0xfb, 0x74, 0x6a, 0x92, 0xd5, 0x9e, 0x7f, 0xe6, 0x33, 0x6b, 0x85, 0xde, 0x21, 0x9b, 0xcc,
	0x0f, 0xfc, 0x33, 0xaf, 0x37, 0x08, 0x4f, 0x7a, 0xc1, 0xb9, 0x65, 0x50, 0x42, 0x6a, 0x5e, 0xf0,
	0xca, 0x3b, 0xef, 0x5b, 0x95, 0xd6, 0x01, 0xb1, 0x7e, 0x26, 0x53, 0x8b, 0x6c, 0x1c, 0x1d, 0x07,
	0x03, 0x9f, 0x85, 0xfd, 0x81, 0x37, 0xf0, 0xad, 0x15, 0xda, 0x20, 0xd6, 0xe1, 0x79, 0xcf, 0xeb,
	0x1e, 0x3f, 0x0b, 0xbb, 0xfe, 0xc0, 0x3b, 0xf4, 0x06, 0x9e, 0x65, 0xb4, 0x3e, 0x57, 0xc9, 0x7a,
	0x17, 0x93, 0xfe, 0xfc, 0xca, 0x74, 0x97, 0xd4, 0x13, 0x2e, 0xa3, 0x61, 0x06, 0x89, 0xd6, 0xb2,
	0xce, 0xae, 0x6d, 0xda, 0x25, 0xa6, 0x28, 0x32, 0x08, 0x25, 0x28, 0x69, 0x57, 0x9a, 0xd5, 0xf6,
	0x7a, 0x67, 0x7f, 0x69, 0x21, 0x58, 0x91, 0x41, 0x1f, 0x14, 0xab, 0x8b, 0x72, 0x21, 0xe9, 0x13,
	0x72, 0x2f, 0x2e, 0xa4, 0xc2, 0x71, 0xc8, 0x73, 0x05, 0xe2, 0x0a, 0xf2, 0xd9, 0xcd, 0xc3, 0x31,
	0x48, 0x19, 0xa5, 0x60, 0x57, 0x9b, 0x46, 0xdb, 0x64, 0x3b, 0x65, 0xc8, 0xf1, 0x42, 0x44, 0xb7,
	0x0c, 0xa0, 0x17, 0x64, 0x33, 0x9a, 0x3d, 0x3b, 0xcc, 0x4a, 0x79, 0xed, 0xd5, 0xa6, 0xd1, 0x5e,
	0xef, 0x3c, 0xfe, 0xad, 0xda, 0xb0, 0x8d, 0x68, 0xb1, 0xa1, 0xf6, 0x49, 0x43, 0xc0, 0xfb, 0x02,
	0xa4, 0x0a, 0x2f, 0x21, 0x4a, 0x40, 0xc8, 0x10, 0xf3, 0x6c, 0x6a, 0xd7, 0xb4, 0x24, 0x74, 0xee,
	0x7b, 0x5e, 0xba, 0x4e, 0xf2, 0x6c, 0x4a, 0x3b, 0xe4, 0xae, 0x00, 0x39, 0xc1, 0x5c, 0xc2, 0xed,
	0x94, 0x35, 0x9d, 0xb2, 0xfd, 0xc3, 0xb9, 0x98, 0xb3, 0x47, 0xfe, 0x17, 0x90, 0x0a, 0x90, 0xb3,
	0x7f, 0x64, 0xf6, 0x0c, 0x69, 0xff, 0xa7, 0xa3, 0xb7, 0x6e, 0xb6, 0x03, 0x4c, 0x65, 0xeb, 0x35,
	0x59, 0x9b, 0xeb, 0x47, 0x77, 0x48, 0xbd, 0x2c, 0x82, 0x12, 0xba, 0x40, 0x26, 0x5b, 0xd3, 0x8a,
	0x2a, 0x41, 0x1b, 0x64, 0x75, 0xc4, 0x33, 0x90, 0x76, 0xb5, 0x59, 0x6d, 0x9b, 0xac, 0x34, 0xe8,
	0x7d, 0x62, 0x26, 0x5c, 0x40, 0xac, 0x50, 0x4c, 0x35, 0xde, 0x64, 0x37, 0x1b, 0xad, 0x4f, 0x55,
	0xb2, 0xbd, 0x50, 0xff, 0x97, 0x20, 0x18, 0x16, 0x0a, 0xfe, 0xf5, 0xc1, 0x5f, 0xec, 0x83, 0xa7,
	0xa7, 0x5f, 0xbe, 0x3d, 0x30, 0x2e, 0x5e, 0x2c, 0x37, 0x67, 0x27, 0xef, 0xd2, 0x5f, 0xcf, 0xda,
	0x61, 0x4d, 0x4f, 0xca, 0x47, 0xdf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x0d, 0xbb, 0x9f, 0xbd,
	0x05, 0x00, 0x00,
}

func (this *AuditLogging) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuditLogging)
	if !ok {
		that2, ok := that.(AuditLogging)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if this.Location != that1.Location {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ModSecurity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ModSecurity)
	if !ok {
		that2, ok := that.(ModSecurity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Disabled != that1.Disabled {
		return false
	}
	if len(this.RuleSets) != len(that1.RuleSets) {
		return false
	}
	for i := range this.RuleSets {
		if !this.RuleSets[i].Equal(that1.RuleSets[i]) {
			return false
		}
	}
	if this.CustomInterventionMessage != that1.CustomInterventionMessage {
		return false
	}
	if !this.AuditLogging.Equal(that1.AuditLogging) {
		return false
	}
	if this.RequestHeadersOnly != that1.RequestHeadersOnly {
		return false
	}
	if this.ResponseHeadersOnly != that1.ResponseHeadersOnly {
		return false
	}
	if this.RegressionLogs != that1.RegressionLogs {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RuleSet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuleSet)
	if !ok {
		that2, ok := that.(RuleSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RuleStr != that1.RuleStr {
		return false
	}
	if len(this.Files) != len(that1.Files) {
		return false
	}
	for i := range this.Files {
		if this.Files[i] != that1.Files[i] {
			return false
		}
	}
	if this.Directory != that1.Directory {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ModSecurityPerRoute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ModSecurityPerRoute)
	if !ok {
		that2, ok := that.(ModSecurityPerRoute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Disabled != that1.Disabled {
		return false
	}
	if len(this.RuleSets) != len(that1.RuleSets) {
		return false
	}
	for i := range this.RuleSets {
		if !this.RuleSets[i].Equal(that1.RuleSets[i]) {
			return false
		}
	}
	if this.CustomInterventionMessage != that1.CustomInterventionMessage {
		return false
	}
	if !this.AuditLogging.Equal(that1.AuditLogging) {
		return false
	}
	if this.RequestHeadersOnly != that1.RequestHeadersOnly {
		return false
	}
	if this.ResponseHeadersOnly != that1.ResponseHeadersOnly {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
