{{- if .Values.gateway.updateValues -}}
{{- include "gloo.updatevalues" . -}}
{{- end -}}
{{- if .Values.gateway.enabled }}
{{- $global := .Values.global }}
{{- range $name, $spec := .Values.gatewayProxies }}
{{- $statsConfig := coalesce $spec.stats $global.glooStats }}
---
# config_map
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $name | kebabcase }}-envoy-config
  namespace: {{ $.Release.Namespace }}
  labels:
    app: gloo
    gloo: gateway-proxy
    gateway-proxy-id: {{ $name | kebabcase }}
data:
{{ if (empty $spec.configMap.data) }}
  envoy.yaml: |
    layered_runtime:
      layers:
      - name: static_layer
        static_layer:
          overload:
            global_downstream_max_connections: {{ $spec.globalDownstreamMaxConnections }}
      - name: admin_layer
        admin_layer: {}
    node:
      cluster: gateway
      id: "{{ `{{.PodName}}.{{.PodNamespace}}` }}"
      metadata:
        # role's value is the key for the in-memory xds cache (projects/gloo/pkg/xds/envoy.go)
        role: "{{ `{{.PodNamespace}}` }}~{{ $name | kebabcase }}"
    stats_sinks:
      - name: envoy.stat_sinks.metrics_service
        typed_config:
          "@type": type.googleapis.com/envoy.config.metrics.v3.MetricsServiceConfig
          grpc_service:
            envoy_grpc: {cluster_name: gloo.{{ $.Release.Namespace }}.svc.{{ $.Values.k8s.clusterName}}:9966}
    static_resources:
{{- if or $statsConfig.enabled (or $spec.readConfig $spec.extraListenersHelper) }}
      listeners:
{{- end }} # if or $statsConfig.enabled (or $spec.readConfig $spec.extraListenersHelper)
{{- if $spec.extraListenersHelper }}
{{- include $spec.extraListenersHelper $ | nindent 8 }}
{{- end }} # $spec.extraListenersHelper
{{- if $statsConfig.enabled }}
        - name: prometheus_listener
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 8081
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    codec_type: AUTO
                    stat_prefix: prometheus
                    route_config:
                      name: prometheus_route
                      virtual_hosts:
                        - name: prometheus_host
                          domains:
                            - "*"
                          routes:
                            - match:
                                path: "/ready"
                                headers:
                                - name: ":method"
                                  exact_match: GET
                              route:
                                cluster: admin_port_cluster
                            - match:
                                prefix: "/metrics"
                                headers:
                                - name: ":method"
                                  exact_match: GET
                              route:
                                prefix_rewrite: "/stats/prometheus"
                                cluster: admin_port_cluster
                    http_filters:
                      - name: envoy.filters.http.router
{{- if $spec.tracing -}}
{{- if $spec.tracing.provider }}
                    tracing:
                      provider:
{{ toYaml $spec.tracing.provider | indent 24}}
{{- end}} # if $spec.tracing.provider
{{- end}} # if $spec.tracing
{{- end}} # if $statsConfig.enabled
{{- if $spec.readConfig }}
        - name: read_config_listener
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 8082
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    codec_type: AUTO
                    stat_prefix: read_config
                    route_config:
                      name: read_config_route
                      virtual_hosts:
                        - name: read_config_host
                          domains:
                            - "*"
                          routes:
                            - match:
                                path: "/ready"
                                headers:
                                  - name: ":method"
                                    exact_match: GET
                              route:
                                cluster: admin_port_cluster
                            - match:
                                prefix: "/stats"
                                headers:
                                  - name: ":method"
                                    exact_match: GET
                              route:
                                cluster: admin_port_cluster
                            - match:
                                 prefix: "/config_dump"
                                 headers:
                                   - name: ":method"
                                     exact_match: GET
                              route:
                                cluster: admin_port_cluster
                    http_filters:
                      - name: envoy.filters.http.router
{{- if $spec.tracing -}}
{{- if $spec.tracing.provider }}
                    tracing:
                      provider:
{{ toYaml $spec.tracing.provider | indent 24}}
{{- end}} # if $spec.tracing.provider
{{- end}} # if $spec.tracing
{{- end}} # if $spec.readConfig
      clusters:
      - name: gloo.{{ $.Release.Namespace }}.svc.{{ $.Values.k8s.clusterName}}:{{ $.Values.gloo.deployment.xdsPort }}
        alt_stat_name: xds_cluster
        connect_timeout: 5.000s
        load_assignment:
          cluster_name: gloo.{{ $.Release.Namespace }}.svc.{{ $.Values.k8s.clusterName}}:{{ $.Values.gloo.deployment.xdsPort }}
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: gloo.{{ $.Release.Namespace }}.svc.{{ $.Values.k8s.clusterName}}
                    port_value: {{ $.Values.gloo.deployment.xdsPort }}
        http2_protocol_options: {}
        upstream_connection_options:
          tcp_keepalive: {}
        type: STRICT_DNS
        respect_dns_ttl: true
{{- if $global.glooMtls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_certificate_sds_secret_configs:
                - name: server_cert
                  sds_config:
                    api_config_source:
                      api_type: GRPC
                      grpc_services:
                      - envoy_grpc:
                          cluster_name: gateway_proxy_sds
              validation_context_sds_secret_config:
                name: validation_context
                sds_config:
                  api_config_source:
                    api_type: GRPC
                    grpc_services:
                    - envoy_grpc:
                        cluster_name: gateway_proxy_sds
{{- end }}
{{- if or $global.istioSDS.enabled $global.glooMtls.enabled }}
      - name: gateway_proxy_sds
        connect_timeout: 0.25s
        http2_protocol_options: {}
        load_assignment:
          cluster_name: gateway_proxy_sds
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 8234
{{- end }}
      - name: rest_xds_cluster
        alt_stat_name: rest_xds_cluster
        connect_timeout: 5.000s
        load_assignment:
          cluster_name: rest_xds_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: gloo.{{ $.Release.Namespace }}.svc.{{ $.Values.k8s.clusterName}}
                    port_value: {{ $.Values.gloo.deployment.restXdsPort }}
        upstream_connection_options:
          tcp_keepalive: {}
        type: STRICT_DNS
        respect_dns_ttl: true
{{- if $global.glooMtls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_certificate_sds_secret_configs:
              - name: server_cert
                sds_config:
                  api_config_source:
                    api_type: GRPC
                    grpc_services:
                    - envoy_grpc:
                        cluster_name: gateway_proxy_sds
              validation_context_sds_secret_config:
                name: validation_context
                sds_config:
                  api_config_source:
                    api_type: GRPC
                    grpc_services:
                    - envoy_grpc:
                        cluster_name: gateway_proxy_sds
{{- end }}
      - name: wasm-cache
        connect_timeout: 5.000s
        load_assignment:
          cluster_name: wasm-cache
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: gloo.{{ $.Release.Namespace }}.svc.{{ $.Values.k8s.clusterName}}
                    port_value: 9979
        upstream_connection_options:
          tcp_keepalive: {}
        type: STRICT_DNS
        respect_dns_ttl: true
      - name: gloo.{{ $.Release.Namespace }}.svc.{{ $.Values.k8s.clusterName}}:9966
        alt_stat_name: metrics_cluster
        connect_timeout: 5.000s
        load_assignment:
            cluster_name: gloo.{{ $.Release.Namespace }}.svc.{{ $.Values.k8s.clusterName}}:9966
            endpoints:
            - lb_endpoints:
              - endpoint:
                    address:
                        socket_address:
                            address: gloo.{{ $.Release.Namespace }}.svc.{{ $.Values.k8s.clusterName}}
                            port_value: 9966
        http2_protocol_options: {}
        type: STRICT_DNS
{{- if $.Values.accessLogger.enabled }}
      - name: access_log_cluster
        connect_timeout: 5.000s
        load_assignment:
            cluster_name: access_log_cluster
            endpoints:
            - lb_endpoints:
              - endpoint:
                    address:
                        socket_address:
                            address: gateway-proxy-access-logger.{{ $.Release.Namespace }}.svc.{{ $.Values.k8s.clusterName}}
                            port_value: {{$.Values.accessLogger.port}}
        http2_protocol_options: {}
        type: STRICT_DNS
{{- end}} # if .Values.accessLogger.enabled
{{- if $spec.tracing -}}
{{- if $spec.tracing.cluster}}
{{ toYaml $spec.tracing.cluster | indent 6}}
{{- end}} # if $spec.tracing.cluster
{{- end}} # if $spec.tracing

{{- if $.Values.settings.aws.enableServiceAccountCredentials }}
      - name: aws_sts_cluster
        connect_timeout: 5.000s
        type: LOGICAL_DNS
        lb_policy: ROUND_ROBIN
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if ne $.Values.settings.aws.stsCredentialsRegion ""}}
            sni: sts.{{ $.Values.settings.aws.stsCredentialsRegion }}.amazonaws.com
{{- else }}
            sni: sts.amazonaws.com
{{- end }}
        load_assignment:
          cluster_name: aws_sts_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    port_value: 443
{{- if ne $.Values.settings.aws.stsCredentialsRegion ""}}
                    address: sts.{{ $.Values.settings.aws.stsCredentialsRegion }}.amazonaws.com
{{- else }}
                    address: sts.amazonaws.com
{{- end }}
{{- end}} # if $.Values.settings.aws.enableServiceAccountCredentials

{{- if or $statsConfig.enabled ($spec.readConfig) }}
      - name: admin_port_cluster
        connect_timeout: 5.000s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: admin_port_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ $spec.loopBackAddress }}
                    port_value: 19000
{{- end}} # if or $statsConfig.enabled ($spec.readConfig)

    dynamic_resources:
      ads_config:
        api_type: GRPC
        rate_limit_settings: {}
        grpc_services:
        - envoy_grpc: {cluster_name: gloo.{{ $.Release.Namespace }}.svc.{{ $.Values.k8s.clusterName}}:{{ $.Values.gloo.deployment.xdsPort }}}
      cds_config:
        ads: {}
      lds_config:
        ads: {}
    admin:
      access_log_path: /dev/null
      address:
        socket_address:
          address: {{ $spec.loopBackAddress }}
          port_value: 19000
{{- else}}{{ toYaml $spec.configMap.data | indent 2}}{{- end}} # if (empty $spec.configMap.data) ## allows full custom
{{- end }} # range $name, $spec := .Values.gatewayProxies
{{- end -}} # if .Values.gateway.enabled
