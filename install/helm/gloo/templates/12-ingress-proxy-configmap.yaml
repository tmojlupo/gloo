{{- if .Values.ingress.enabled }}
# configmap
apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-envoy-config
  namespace: {{ .Release.Namespace }}
  labels:
    app: gloo
    gloo: {{ .Values.ingressProxy.label }}
data:
{{ if (empty .Values.ingressProxy.configMap.data) }}
  envoy.yaml: |
    node:
      cluster: ingress
      id: "{{ `{{.PodName}}.{{.PodNamespace}}` }}"
      metadata:
        # role's value is the key for the in-memory xds cache (projects/gloo/pkg/xds/envoy.go)
        role: "{{ `{{.PodNamespace}}` }}~ingress-proxy"
    static_resources:
      clusters:
      - name: xds_cluster
        connect_timeout: 5.000s
        load_assignment:
          cluster_name: xds_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: gloo
                    port_value: {{ .Values.gloo.deployment.xdsPort }}
        http2_protocol_options: {}
        upstream_connection_options:
          tcp_keepalive: {}
        type: STRICT_DNS
{{- if .Values.ingressProxy.deployment.stats }}
      - name: admin_port_cluster
        connect_timeout: 5.000s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: admin_port_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 19000

      listeners:
        - name: prometheus_listener
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 8081
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    codec_type: AUTO
                    stat_prefix: prometheus
                    route_config:
                      name: prometheus_route
                      virtual_hosts:
                        - name: prometheus_host
                          domains:
                            - "*"
                          routes:
                            - match:
                                prefix: "/metrics"
                                headers:
                                - name: ":method"
                                  exact_match: GET
                              route:
                                prefix_rewrite: "/stats/prometheus"
                                cluster: admin_port_cluster
                    http_filters:
                      - name: envoy.filters.http.router
{{- if .Values.ingressProxy.tracing }}
                    tracing:
{{ toYaml .Values.ingressProxy.tracing | indent 22}}
{{- end}} # if .Values.ingressProxy.tracing
{{- end}}

    dynamic_resources:
      ads_config:
        api_type: GRPC
        rate_limit_settings: {}
        grpc_services:
        - envoy_grpc: {cluster_name: xds_cluster}
      cds_config:
        ads: {}
      lds_config:
        ads: {}
    admin:
      access_log_path: /dev/null
      address:
        socket_address:
          address: {{ .Values.ingressProxy.loopBackAddress }}
          port_value: 19000
{{- else}}{{ toYaml .Values.ingressProxy.configMap.data | indent 2}}{{- end}}

{{- end }}
