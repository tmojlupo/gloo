|Option|Type|Default Value|Description|
|------|----|-----------|-------------|
|namespace.create|bool|false|create the installation namespace|
|crds.create|bool|false||
|settings.watchNamespaces[]|string||whitelist of namespaces for gloo to watch for services and CRDs. Empty list means all namespaces|
|settings.writeNamespace|string||namespace where intermediary CRDs will be written to, e.g. Upstreams written by Gloo Discovery.|
|settings.integrations.knative.enabled|bool|false|enabled knative components|
|settings.integrations.knative.version|string|0.10.0|the version of knative installed to the cluster. if using version < 0.8.0, gloo will use Knative's ClusterIngress API for configuration rather than the namespace-scoped Ingress|
|settings.integrations.knative.proxy.image.tag|string|<release_version, ex: 1.2.3>|tag for the container|
|settings.integrations.knative.proxy.image.repository|string|gloo-envoy-wrapper|image name (repository) for the container.|
|settings.integrations.knative.proxy.image.registry|string||image prefix/registry e.g. (quay.io/solo-io)|
|settings.integrations.knative.proxy.image.pullPolicy|string||image pull policy for the container|
|settings.integrations.knative.proxy.image.pullSecret|string||image pull policy for the container |
|settings.integrations.knative.proxy.httpPort|int|80|HTTP port for the proxy|
|settings.integrations.knative.proxy.httpsPort|int|443|HTTPS port for the proxy|
|settings.integrations.knative.proxy.tracing|string||tracing configuration|
|settings.integrations.knative.proxy.replicas|int|1|number of instances to deploy|
|settings.integrations.knative.proxy.customEnv[].name|string|||
|settings.integrations.knative.proxy.customEnv[].value|string|||
|settings.integrations.knative.proxy.customEnv[].valueFrom.fieldRef.apiVersion|string|||
|settings.integrations.knative.proxy.customEnv[].valueFrom.fieldRef.fieldPath|string|||
|settings.integrations.knative.proxy.customEnv[].valueFrom.resourceFieldRef.containerName|string|||
|settings.integrations.knative.proxy.customEnv[].valueFrom.resourceFieldRef.resource|string|||
|settings.integrations.knative.proxy.customEnv[].valueFrom.resourceFieldRef.divisor|int64|||
|settings.integrations.knative.proxy.customEnv[].valueFrom.resourceFieldRef.divisor|int32|||
|settings.integrations.knative.proxy.customEnv[].valueFrom.resourceFieldRef.divisor|bool|||
|settings.integrations.knative.proxy.customEnv[].valueFrom.resourceFieldRef.divisor[]|uint|||
|settings.integrations.knative.proxy.customEnv[].valueFrom.resourceFieldRef.divisor[]|int32|||
|settings.integrations.knative.proxy.customEnv[].valueFrom.resourceFieldRef.divisor[]|string|||
|settings.integrations.knative.proxy.customEnv[].valueFrom.resourceFieldRef.divisor[]|string|||
|settings.integrations.knative.proxy.customEnv[].valueFrom.configMapKeyRef.name|string|||
|settings.integrations.knative.proxy.customEnv[].valueFrom.configMapKeyRef.key|string|||
|settings.integrations.knative.proxy.customEnv[].valueFrom.configMapKeyRef.optional|bool|||
|settings.integrations.knative.proxy.customEnv[].valueFrom.secretKeyRef.name|string|||
|settings.integrations.knative.proxy.customEnv[].valueFrom.secretKeyRef.key|string|||
|settings.integrations.knative.proxy.customEnv[].valueFrom.secretKeyRef.optional|bool|||
|settings.integrations.knative.proxy.resources.limits.memory|string||amount of memory|
|settings.integrations.knative.proxy.resources.limits.cpu|string||amount of CPUs|
|settings.integrations.knative.proxy.resources.requests.memory|string||amount of memory|
|settings.integrations.knative.proxy.resources.requests.cpu|string||amount of CPUs|
|settings.integrations.knative.proxy.service.type|string|LoadBalancer|K8s service type|
|settings.integrations.knative.proxy.service.extraAnnotations.NAME|string||extra annotations to add to the service|
|settings.integrations.knative.requireIngressClass|bool||only serve traffic for Knative Ingress objects with the annotation 'networking.knative.dev/ingress.class: gloo.ingress.networking.knative.dev'.|
|settings.create|bool|true|create a Settings CRD which provides bootstrap configuration to Gloo controllers|
|settings.extensions|interface|||
|settings.singleNamespace|bool|false|Enable to use install namespace as WatchNamespace and WriteNamespace|
|settings.invalidConfigPolicy.replaceInvalidRoutes|bool|false|Rather than pausing configuration updates, in the event of an invalid Route defined on a virtual service or route table, Gloo will serve the route with a predefined direct response action. This allows valid routes to be updated when other routes are invalid.|
|settings.invalidConfigPolicy.invalidRouteResponseCode|int64|404|the response code for the direct response|
|settings.invalidConfigPolicy.invalidRouteResponseBody|string|Gloo Gateway has invalid configuration. Administrators should run `glooctl check` to find and fix config errors.|the response body for the direct response|
|settings.linkerd|bool|false|Enable automatic Linkerd integration in Gloo.|
|settings.disableProxyGarbageCollection|bool|false|Set this option to determine the state of an Envoy listener when the corresponding Gloo Proxy resource has no routes. If false (default), Gloo will propagate the state of the Proxy to Envoy, resetting the listener to a clean slate with no routes. If true, Gloo will keep serving the routes from the last applied valid configuration.|
|settings.disableKubernetesDestinations|bool|false|Gloo allows you to directly reference a Kubernetes service as a routing destination. To enable this feature, Gloo scans the cluster for Kubernetes services and creates a special type of in-memory Upstream to represent them. If the cluster contains a lot of services and you do not restrict the namespaces Gloo is watching, this can result in significant overhead. If you do not plan on using this feature, you can set this flag to true to turn it off.|
|gloo.deployment.image.tag|string|<release_version, ex: 1.2.3>|tag for the container|
|gloo.deployment.image.repository|string|gloo|image name (repository) for the container.|
|gloo.deployment.image.registry|string||image prefix/registry e.g. (quay.io/solo-io)|
|gloo.deployment.image.pullPolicy|string||image pull policy for the container|
|gloo.deployment.image.pullSecret|string||image pull policy for the container |
|gloo.deployment.xdsPort|int|9977|port where gloo serves xDS API to Envoy|
|gloo.deployment.validationPort|int|9988|port where gloo serves gRPC Proxy Validation to Gateway|
|gloo.deployment.stats.enabled|bool||Controls whether or not prometheus stats are enabled|
|gloo.deployment.floatingUserId|bool|false|set to true to allow the cluster to dynamically assign a user ID|
|gloo.deployment.runAsUser|float64||Explicitly set the user ID for the container to run as. Default is 10101|
|gloo.deployment.externalTrafficPolicy|string||Set the external traffic policy on the gloo service|
|gloo.deployment.disableUsageStatistics|bool|false|Disable the collection of gloo usage statistics|
|gloo.deployment.replicas|int|1|number of instances to deploy|
|gloo.deployment.customEnv[].name|string|||
|gloo.deployment.customEnv[].value|string|||
|gloo.deployment.customEnv[].valueFrom.fieldRef.apiVersion|string|||
|gloo.deployment.customEnv[].valueFrom.fieldRef.fieldPath|string|||
|gloo.deployment.customEnv[].valueFrom.resourceFieldRef.containerName|string|||
|gloo.deployment.customEnv[].valueFrom.resourceFieldRef.resource|string|||
|gloo.deployment.customEnv[].valueFrom.resourceFieldRef.divisor|int64|||
|gloo.deployment.customEnv[].valueFrom.resourceFieldRef.divisor|int32|||
|gloo.deployment.customEnv[].valueFrom.resourceFieldRef.divisor|bool|||
|gloo.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|uint|||
|gloo.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|int32|||
|gloo.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|string|||
|gloo.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|string|||
|gloo.deployment.customEnv[].valueFrom.configMapKeyRef.name|string|||
|gloo.deployment.customEnv[].valueFrom.configMapKeyRef.key|string|||
|gloo.deployment.customEnv[].valueFrom.configMapKeyRef.optional|bool|||
|gloo.deployment.customEnv[].valueFrom.secretKeyRef.name|string|||
|gloo.deployment.customEnv[].valueFrom.secretKeyRef.key|string|||
|gloo.deployment.customEnv[].valueFrom.secretKeyRef.optional|bool|||
|gloo.deployment.resources.limits.memory|string||amount of memory|
|gloo.deployment.resources.limits.cpu|string||amount of CPUs|
|gloo.deployment.resources.requests.memory|string||amount of memory|
|gloo.deployment.resources.requests.cpu|string||amount of CPUs|
|discovery.deployment.image.tag|string|<release_version, ex: 1.2.3>|tag for the container|
|discovery.deployment.image.repository|string|discovery|image name (repository) for the container.|
|discovery.deployment.image.registry|string||image prefix/registry e.g. (quay.io/solo-io)|
|discovery.deployment.image.pullPolicy|string||image pull policy for the container|
|discovery.deployment.image.pullSecret|string||image pull policy for the container |
|discovery.deployment.stats.enabled|bool||Controls whether or not prometheus stats are enabled|
|discovery.deployment.floatingUserId|bool|false|set to true to allow the cluster to dynamically assign a user ID|
|discovery.deployment.runAsUser|float64||Explicitly set the user ID for the container to run as. Default is 10101|
|discovery.deployment.replicas|int|1|number of instances to deploy|
|discovery.deployment.customEnv[].name|string|||
|discovery.deployment.customEnv[].value|string|||
|discovery.deployment.customEnv[].valueFrom.fieldRef.apiVersion|string|||
|discovery.deployment.customEnv[].valueFrom.fieldRef.fieldPath|string|||
|discovery.deployment.customEnv[].valueFrom.resourceFieldRef.containerName|string|||
|discovery.deployment.customEnv[].valueFrom.resourceFieldRef.resource|string|||
|discovery.deployment.customEnv[].valueFrom.resourceFieldRef.divisor|int64|||
|discovery.deployment.customEnv[].valueFrom.resourceFieldRef.divisor|int32|||
|discovery.deployment.customEnv[].valueFrom.resourceFieldRef.divisor|bool|||
|discovery.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|uint|||
|discovery.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|int32|||
|discovery.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|string|||
|discovery.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|string|||
|discovery.deployment.customEnv[].valueFrom.configMapKeyRef.name|string|||
|discovery.deployment.customEnv[].valueFrom.configMapKeyRef.key|string|||
|discovery.deployment.customEnv[].valueFrom.configMapKeyRef.optional|bool|||
|discovery.deployment.customEnv[].valueFrom.secretKeyRef.name|string|||
|discovery.deployment.customEnv[].valueFrom.secretKeyRef.key|string|||
|discovery.deployment.customEnv[].valueFrom.secretKeyRef.optional|bool|||
|discovery.deployment.resources.limits.memory|string||amount of memory|
|discovery.deployment.resources.limits.cpu|string||amount of CPUs|
|discovery.deployment.resources.requests.memory|string||amount of memory|
|discovery.deployment.resources.requests.cpu|string||amount of CPUs|
|discovery.fdsMode|string|WHITELIST|mode for function discovery (blacklist or whitelist). See more info in the settings docs|
|discovery.enabled|bool|true|enable Discovery features|
|gateway.enabled|bool|true|enable Gloo API Gateway features|
|gateway.validation.enabled|bool|true|enable Gloo API Gateway validation hook (default true)|
|gateway.validation.alwaysAcceptResources|bool|true|unless this is set this to false in order to ensure validation webhook rejects invalid resources. by default, validation webhook will only log and report metrics for invalid resource admission without rejecting them outright.|
|gateway.validation.secretName|string|gateway-validation-certs|Name of the Kubernetes Secret containing TLS certificates used by the validation webhook server. This secret will be created by the certGen Job if the certGen Job is enabled.|
|gateway.validation.failurePolicy|string|Ignore|failurePolicy defines how unrecognized errors from the Gateway validation endpoint are handled - allowed values are 'Ignore' or 'Fail'. Defaults to Ignore |
|gateway.validation.webhook.enabled|bool|true|enable validation webhook (default true)|
|gateway.deployment.image.tag|string|<release_version, ex: 1.2.3>|tag for the container|
|gateway.deployment.image.repository|string|gateway|image name (repository) for the container.|
|gateway.deployment.image.registry|string||image prefix/registry e.g. (quay.io/solo-io)|
|gateway.deployment.image.pullPolicy|string||image pull policy for the container|
|gateway.deployment.image.pullSecret|string||image pull policy for the container |
|gateway.deployment.stats.enabled|bool||Controls whether or not prometheus stats are enabled|
|gateway.deployment.floatingUserId|bool|false|set to true to allow the cluster to dynamically assign a user ID|
|gateway.deployment.runAsUser|float64||Explicitly set the user ID for the container to run as. Default is 10101|
|gateway.deployment.replicas|int|1|number of instances to deploy|
|gateway.deployment.customEnv[].name|string|||
|gateway.deployment.customEnv[].value|string|||
|gateway.deployment.customEnv[].valueFrom.fieldRef.apiVersion|string|||
|gateway.deployment.customEnv[].valueFrom.fieldRef.fieldPath|string|||
|gateway.deployment.customEnv[].valueFrom.resourceFieldRef.containerName|string|||
|gateway.deployment.customEnv[].valueFrom.resourceFieldRef.resource|string|||
|gateway.deployment.customEnv[].valueFrom.resourceFieldRef.divisor|int64|||
|gateway.deployment.customEnv[].valueFrom.resourceFieldRef.divisor|int32|||
|gateway.deployment.customEnv[].valueFrom.resourceFieldRef.divisor|bool|||
|gateway.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|uint|||
|gateway.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|int32|||
|gateway.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|string|||
|gateway.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|string|||
|gateway.deployment.customEnv[].valueFrom.configMapKeyRef.name|string|||
|gateway.deployment.customEnv[].valueFrom.configMapKeyRef.key|string|||
|gateway.deployment.customEnv[].valueFrom.configMapKeyRef.optional|bool|||
|gateway.deployment.customEnv[].valueFrom.secretKeyRef.name|string|||
|gateway.deployment.customEnv[].valueFrom.secretKeyRef.key|string|||
|gateway.deployment.customEnv[].valueFrom.secretKeyRef.optional|bool|||
|gateway.deployment.resources.limits.memory|string||amount of memory|
|gateway.deployment.resources.limits.cpu|string||amount of CPUs|
|gateway.deployment.resources.requests.memory|string||amount of memory|
|gateway.deployment.resources.requests.cpu|string||amount of CPUs|
|gateway.certGenJob.image.tag|string|<release_version, ex: 1.2.3>|tag for the container|
|gateway.certGenJob.image.repository|string|certgen|image name (repository) for the container.|
|gateway.certGenJob.image.registry|string||image prefix/registry e.g. (quay.io/solo-io)|
|gateway.certGenJob.image.pullPolicy|string||image pull policy for the container|
|gateway.certGenJob.image.pullSecret|string||image pull policy for the container |
|gateway.certGenJob.restartPolicy|string|OnFailure|restart policy to use when the pod exits|
|gateway.certGenJob.enabled|bool|true|enable the job that generates the certificates for the validating webhook at install time (default true)|
|gateway.certGenJob.setTtlAfterFinished|bool|true|Set ttlSecondsAfterFinished (a k8s feature in Alpha) on the job. Defaults to true|
|gateway.certGenJob.ttlSecondsAfterFinished|int|60|Clean up the finished job after this many seconds. Defaults to 60|
|gateway.updateValues|bool|false|if true, will use a provided helm helper 'gloo.updatevalues' to update values during template render - useful for plugins/extensions|
|gateway.proxyServiceAccount.disableAutomount|bool|false|disable automunting the service account to the gateway proxy. not mounting the token hardens the proxy container, but may interfere with service mesh integrations|
|gateway.readGatewaysFromAllNamespaces|bool|false|if true, read Gateway custom resources from all watched namespaces rather than just the namespace of the Gateway controller|
|gatewayProxies.NAME.kind.deployment.replicas|int||number of instances to deploy|
|gatewayProxies.NAME.kind.deployment.customEnv[].name|string|||
|gatewayProxies.NAME.kind.deployment.customEnv[].value|string|||
|gatewayProxies.NAME.kind.deployment.customEnv[].valueFrom.fieldRef.apiVersion|string|||
|gatewayProxies.NAME.kind.deployment.customEnv[].valueFrom.fieldRef.fieldPath|string|||
|gatewayProxies.NAME.kind.deployment.customEnv[].valueFrom.resourceFieldRef.containerName|string|||
|gatewayProxies.NAME.kind.deployment.customEnv[].valueFrom.resourceFieldRef.resource|string|||
|gatewayProxies.NAME.kind.deployment.customEnv[].valueFrom.resourceFieldRef.divisor|int64|||
|gatewayProxies.NAME.kind.deployment.customEnv[].valueFrom.resourceFieldRef.divisor|int32|||
|gatewayProxies.NAME.kind.deployment.customEnv[].valueFrom.resourceFieldRef.divisor|bool|||
|gatewayProxies.NAME.kind.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|uint|||
|gatewayProxies.NAME.kind.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|int32|||
|gatewayProxies.NAME.kind.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|string|||
|gatewayProxies.NAME.kind.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|string|||
|gatewayProxies.NAME.kind.deployment.customEnv[].valueFrom.configMapKeyRef.name|string|||
|gatewayProxies.NAME.kind.deployment.customEnv[].valueFrom.configMapKeyRef.key|string|||
|gatewayProxies.NAME.kind.deployment.customEnv[].valueFrom.configMapKeyRef.optional|bool|||
|gatewayProxies.NAME.kind.deployment.customEnv[].valueFrom.secretKeyRef.name|string|||
|gatewayProxies.NAME.kind.deployment.customEnv[].valueFrom.secretKeyRef.key|string|||
|gatewayProxies.NAME.kind.deployment.customEnv[].valueFrom.secretKeyRef.optional|bool|||
|gatewayProxies.NAME.kind.daemonSet.hostPort|bool||whether or not to enable host networking on the pod. Only relevant when running as a DaemonSet|
|gatewayProxies.NAME.podTemplate.image.tag|string||tag for the container|
|gatewayProxies.NAME.podTemplate.image.repository|string||image name (repository) for the container.|
|gatewayProxies.NAME.podTemplate.image.registry|string||image prefix/registry e.g. (quay.io/solo-io)|
|gatewayProxies.NAME.podTemplate.image.pullPolicy|string||image pull policy for the container|
|gatewayProxies.NAME.podTemplate.image.pullSecret|string||image pull policy for the container |
|gatewayProxies.NAME.podTemplate.httpPort|int||HTTP port for the gateway service target port|
|gatewayProxies.NAME.podTemplate.httpsPort|int||HTTPS port for the gateway service target port|
|gatewayProxies.NAME.podTemplate.extraPorts[]|interface||extra ports for the gateway pod|
|gatewayProxies.NAME.podTemplate.extraAnnotations.NAME|string||extra annotations to add to the pod|
|gatewayProxies.NAME.podTemplate.nodeName|string||name of node to run on|
|gatewayProxies.NAME.podTemplate.nodeSelector.NAME|string||label selector for nodes|
|gatewayProxies.NAME.podTemplate.tolerations[].key|string|||
|gatewayProxies.NAME.podTemplate.tolerations[].operator|string|||
|gatewayProxies.NAME.podTemplate.tolerations[].value|string|||
|gatewayProxies.NAME.podTemplate.tolerations[].effect|string|||
|gatewayProxies.NAME.podTemplate.tolerations[].tolerationSeconds|int64|||
|gatewayProxies.NAME.podTemplate.probes|bool||enable liveness and readiness probes|
|gatewayProxies.NAME.podTemplate.resources.limits.memory|string||amount of memory|
|gatewayProxies.NAME.podTemplate.resources.limits.cpu|string||amount of CPUs|
|gatewayProxies.NAME.podTemplate.resources.requests.memory|string||amount of memory|
|gatewayProxies.NAME.podTemplate.resources.requests.cpu|string||amount of CPUs|
|gatewayProxies.NAME.podTemplate.disableNetBind|bool||don't add the NET_BIND_SERVICE capability to the pod. This means that the gateway proxy will not be able to bind to ports below 1024|
|gatewayProxies.NAME.podTemplate.runUnprivileged|bool||run envoy as an unprivileged user|
|gatewayProxies.NAME.podTemplate.floatingUserId|bool||set to true to allow the cluster to dynamically assign a user ID|
|gatewayProxies.NAME.podTemplate.runAsUser|float64||Explicitly set the user ID for the container to run as. Default is 10101|
|gatewayProxies.NAME.configMap.data.NAME|string|||
|gatewayProxies.NAME.service.type|string||gateway [service type](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types). default is `LoadBalancer`|
|gatewayProxies.NAME.service.httpPort|int||HTTP port for the gateway service|
|gatewayProxies.NAME.service.httpsPort|int||HTTPS port for the gateway service|
|gatewayProxies.NAME.service.httpNodePort|int||HTTP nodeport for the gateway service if using type NodePort|
|gatewayProxies.NAME.service.httpsNodePort|int||HTTPS nodeport for the gateway service if using type NodePort|
|gatewayProxies.NAME.service.clusterIP|string||static clusterIP (or `None`) when `gatewayProxies[].gatewayProxy.service.type` is `ClusterIP`|
|gatewayProxies.NAME.service.extraAnnotations.NAME|string|||
|gatewayProxies.NAME.service.externalTrafficPolicy|string|||
|gatewayProxies.NAME.service.name|string||Custom name override for the service resource of the proxy|
|gatewayProxies.NAME.service.httpsFirst|bool||List HTTPS port before HTTP|
|gatewayProxies.NAME.service.loadBalancerIP|string||IP address of the load balancer|
|gatewayProxies.NAME.service.loadBalancerSourceRanges[]|string||List of IP CIDR ranges that are allowed to access the load balancer|
|gatewayProxies.NAME.antiAffinity|bool||configure anti affinity such that pods are prefferably not co-located|
|gatewayProxies.NAME.tracing.provider|string|||
|gatewayProxies.NAME.tracing.cluster|string|||
|gatewayProxies.NAME.gatewaySettings.disableGeneratedGateways|bool||set to true to disable the gateway generation for a gateway proxy|
|gatewayProxies.NAME.gatewaySettings.ipv4Only|bool||set to true if your network allows ipv4 addresses only. Sets the Gateway spec's bindAddress to 0.0.0.0 instead of ::|
|gatewayProxies.NAME.gatewaySettings.useProxyProto|bool||use proxy protocol|
|gatewayProxies.NAME.gatewaySettings.customHttpGateway|string||custom yaml to use for http gateway settings|
|gatewayProxies.NAME.gatewaySettings.customHttpsGateway|string||custom yaml to use for https gateway settings|
|gatewayProxies.NAME.gatewaySettings.options.validation_server_addr|string|||
|gatewayProxies.NAME.gatewaySettings.options.validation.proxy_validation_server_addr|string|||
|gatewayProxies.NAME.gatewaySettings.options.validation.validation_webhook_tls_cert|string|||
|gatewayProxies.NAME.gatewaySettings.options.validation.validation_webhook_tls_key|string|||
|gatewayProxies.NAME.gatewaySettings.options.validation.ignore_gloo_validation_failure|bool|||
|gatewayProxies.NAME.gatewaySettings.options.validation.always_accept.value|bool|||
|gatewayProxies.NAME.gatewaySettings.options.validation.always_accept.-[]|uint8|||
|gatewayProxies.NAME.gatewaySettings.options.validation.always_accept.-|int32|||
|gatewayProxies.NAME.gatewaySettings.options.validation.-[]|uint8|||
|gatewayProxies.NAME.gatewaySettings.options.validation.-|int32|||
|gatewayProxies.NAME.gatewaySettings.options.read_gateways_from_all_namespaces|bool|||
|gatewayProxies.NAME.gatewaySettings.options.always_sort_route_table_routes|bool|||
|gatewayProxies.NAME.gatewaySettings.options.-[]|uint8|||
|gatewayProxies.NAME.gatewaySettings.options.-|int32|||
|gatewayProxies.NAME.extraEnvoyArgs[]|string||envoy container args, (e.g. https://www.envoyproxy.io/docs/envoy/latest/operations/cli)|
|gatewayProxies.NAME.extraContainersHelper|string|||
|gatewayProxies.NAME.extraInitContainersHelper|string|||
|gatewayProxies.NAME.extraVolumeHelper|string|||
|gatewayProxies.NAME.extraListenersHelper|string|||
|gatewayProxies.NAME.stats.enabled|bool||Controls whether or not prometheus stats are enabled|
|gatewayProxies.NAME.readConfig|bool||expose a read-only subset of the envoy admin api|
|gatewayProxies.NAME.extraProxyVolumeMountHelper|string||name of custom made named template allowing for extra volume mounts on the proxy container|
|gatewayProxies.gatewayProxy.kind.deployment.replicas|int|1|number of instances to deploy|
|gatewayProxies.gatewayProxy.kind.deployment.customEnv[].name|string|||
|gatewayProxies.gatewayProxy.kind.deployment.customEnv[].value|string|||
|gatewayProxies.gatewayProxy.kind.deployment.customEnv[].valueFrom.fieldRef.apiVersion|string|||
|gatewayProxies.gatewayProxy.kind.deployment.customEnv[].valueFrom.fieldRef.fieldPath|string|||
|gatewayProxies.gatewayProxy.kind.deployment.customEnv[].valueFrom.resourceFieldRef.containerName|string|||
|gatewayProxies.gatewayProxy.kind.deployment.customEnv[].valueFrom.resourceFieldRef.resource|string|||
|gatewayProxies.gatewayProxy.kind.deployment.customEnv[].valueFrom.resourceFieldRef.divisor|int64|||
|gatewayProxies.gatewayProxy.kind.deployment.customEnv[].valueFrom.resourceFieldRef.divisor|int32|||
|gatewayProxies.gatewayProxy.kind.deployment.customEnv[].valueFrom.resourceFieldRef.divisor|bool|||
|gatewayProxies.gatewayProxy.kind.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|uint|||
|gatewayProxies.gatewayProxy.kind.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|int32|||
|gatewayProxies.gatewayProxy.kind.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|string|||
|gatewayProxies.gatewayProxy.kind.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|string|||
|gatewayProxies.gatewayProxy.kind.deployment.customEnv[].valueFrom.configMapKeyRef.name|string|||
|gatewayProxies.gatewayProxy.kind.deployment.customEnv[].valueFrom.configMapKeyRef.key|string|||
|gatewayProxies.gatewayProxy.kind.deployment.customEnv[].valueFrom.configMapKeyRef.optional|bool|||
|gatewayProxies.gatewayProxy.kind.deployment.customEnv[].valueFrom.secretKeyRef.name|string|||
|gatewayProxies.gatewayProxy.kind.deployment.customEnv[].valueFrom.secretKeyRef.key|string|||
|gatewayProxies.gatewayProxy.kind.deployment.customEnv[].valueFrom.secretKeyRef.optional|bool|||
|gatewayProxies.gatewayProxy.kind.daemonSet.hostPort|bool||whether or not to enable host networking on the pod. Only relevant when running as a DaemonSet|
|gatewayProxies.gatewayProxy.podTemplate.image.tag|string|<release_version, ex: 1.2.3>|tag for the container|
|gatewayProxies.gatewayProxy.podTemplate.image.repository|string|gloo-envoy-wrapper|image name (repository) for the container.|
|gatewayProxies.gatewayProxy.podTemplate.image.registry|string||image prefix/registry e.g. (quay.io/solo-io)|
|gatewayProxies.gatewayProxy.podTemplate.image.pullPolicy|string||image pull policy for the container|
|gatewayProxies.gatewayProxy.podTemplate.image.pullSecret|string||image pull policy for the container |
|gatewayProxies.gatewayProxy.podTemplate.httpPort|int|8080|HTTP port for the gateway service target port|
|gatewayProxies.gatewayProxy.podTemplate.httpsPort|int|8443|HTTPS port for the gateway service target port|
|gatewayProxies.gatewayProxy.podTemplate.extraPorts[]|interface||extra ports for the gateway pod|
|gatewayProxies.gatewayProxy.podTemplate.extraAnnotations.NAME|string||extra annotations to add to the pod|
|gatewayProxies.gatewayProxy.podTemplate.nodeName|string||name of node to run on|
|gatewayProxies.gatewayProxy.podTemplate.nodeSelector.NAME|string||label selector for nodes|
|gatewayProxies.gatewayProxy.podTemplate.tolerations[].key|string|||
|gatewayProxies.gatewayProxy.podTemplate.tolerations[].operator|string|||
|gatewayProxies.gatewayProxy.podTemplate.tolerations[].value|string|||
|gatewayProxies.gatewayProxy.podTemplate.tolerations[].effect|string|||
|gatewayProxies.gatewayProxy.podTemplate.tolerations[].tolerationSeconds|int64|||
|gatewayProxies.gatewayProxy.podTemplate.probes|bool|false|enable liveness and readiness probes|
|gatewayProxies.gatewayProxy.podTemplate.resources.limits.memory|string||amount of memory|
|gatewayProxies.gatewayProxy.podTemplate.resources.limits.cpu|string||amount of CPUs|
|gatewayProxies.gatewayProxy.podTemplate.resources.requests.memory|string||amount of memory|
|gatewayProxies.gatewayProxy.podTemplate.resources.requests.cpu|string||amount of CPUs|
|gatewayProxies.gatewayProxy.podTemplate.disableNetBind|bool|false|don't add the NET_BIND_SERVICE capability to the pod. This means that the gateway proxy will not be able to bind to ports below 1024|
|gatewayProxies.gatewayProxy.podTemplate.runUnprivileged|bool|false|run envoy as an unprivileged user|
|gatewayProxies.gatewayProxy.podTemplate.floatingUserId|bool|false|set to true to allow the cluster to dynamically assign a user ID|
|gatewayProxies.gatewayProxy.podTemplate.runAsUser|float64||Explicitly set the user ID for the container to run as. Default is 10101|
|gatewayProxies.gatewayProxy.configMap.data.NAME|string|||
|gatewayProxies.gatewayProxy.service.type|string|LoadBalancer|gateway [service type](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types). default is `LoadBalancer`|
|gatewayProxies.gatewayProxy.service.httpPort|int|80|HTTP port for the gateway service|
|gatewayProxies.gatewayProxy.service.httpsPort|int|443|HTTPS port for the gateway service|
|gatewayProxies.gatewayProxy.service.httpNodePort|int|0|HTTP nodeport for the gateway service if using type NodePort|
|gatewayProxies.gatewayProxy.service.httpsNodePort|int|0|HTTPS nodeport for the gateway service if using type NodePort|
|gatewayProxies.gatewayProxy.service.clusterIP|string||static clusterIP (or `None`) when `gatewayProxies[].gatewayProxy.service.type` is `ClusterIP`|
|gatewayProxies.gatewayProxy.service.extraAnnotations.NAME|string|||
|gatewayProxies.gatewayProxy.service.externalTrafficPolicy|string|||
|gatewayProxies.gatewayProxy.service.name|string||Custom name override for the service resource of the proxy|
|gatewayProxies.gatewayProxy.service.httpsFirst|bool|false|List HTTPS port before HTTP|
|gatewayProxies.gatewayProxy.service.loadBalancerIP|string||IP address of the load balancer|
|gatewayProxies.gatewayProxy.service.loadBalancerSourceRanges[]|string||List of IP CIDR ranges that are allowed to access the load balancer|
|gatewayProxies.gatewayProxy.antiAffinity|bool|false|configure anti affinity such that pods are prefferably not co-located|
|gatewayProxies.gatewayProxy.tracing.provider|string|||
|gatewayProxies.gatewayProxy.tracing.cluster|string|||
|gatewayProxies.gatewayProxy.gatewaySettings.disableGeneratedGateways|bool|false|set to true to disable the gateway generation for a gateway proxy|
|gatewayProxies.gatewayProxy.gatewaySettings.ipv4Only|bool|false|set to true if your network allows ipv4 addresses only. Sets the Gateway spec's bindAddress to 0.0.0.0 instead of ::|
|gatewayProxies.gatewayProxy.gatewaySettings.useProxyProto|bool|false|use proxy protocol|
|gatewayProxies.gatewayProxy.gatewaySettings.customHttpGateway|string||custom yaml to use for http gateway settings|
|gatewayProxies.gatewayProxy.gatewaySettings.customHttpsGateway|string||custom yaml to use for https gateway settings|
|gatewayProxies.gatewayProxy.gatewaySettings.options.validation_server_addr|string|||
|gatewayProxies.gatewayProxy.gatewaySettings.options.validation.proxy_validation_server_addr|string|||
|gatewayProxies.gatewayProxy.gatewaySettings.options.validation.validation_webhook_tls_cert|string|||
|gatewayProxies.gatewayProxy.gatewaySettings.options.validation.validation_webhook_tls_key|string|||
|gatewayProxies.gatewayProxy.gatewaySettings.options.validation.ignore_gloo_validation_failure|bool|||
|gatewayProxies.gatewayProxy.gatewaySettings.options.validation.always_accept.value|bool|||
|gatewayProxies.gatewayProxy.gatewaySettings.options.validation.always_accept.-[]|uint8|||
|gatewayProxies.gatewayProxy.gatewaySettings.options.validation.always_accept.-|int32|||
|gatewayProxies.gatewayProxy.gatewaySettings.options.validation.-[]|uint8|||
|gatewayProxies.gatewayProxy.gatewaySettings.options.validation.-|int32|||
|gatewayProxies.gatewayProxy.gatewaySettings.options.read_gateways_from_all_namespaces|bool|false||
|gatewayProxies.gatewayProxy.gatewaySettings.options.always_sort_route_table_routes|bool|false||
|gatewayProxies.gatewayProxy.gatewaySettings.options.-[]|uint8|||
|gatewayProxies.gatewayProxy.gatewaySettings.options.-|int32|0||
|gatewayProxies.gatewayProxy.extraEnvoyArgs[]|string||envoy container args, (e.g. https://www.envoyproxy.io/docs/envoy/latest/operations/cli)|
|gatewayProxies.gatewayProxy.extraContainersHelper|string|||
|gatewayProxies.gatewayProxy.extraInitContainersHelper|string|||
|gatewayProxies.gatewayProxy.extraVolumeHelper|string|||
|gatewayProxies.gatewayProxy.extraListenersHelper|string|||
|gatewayProxies.gatewayProxy.stats.enabled|bool||Controls whether or not prometheus stats are enabled|
|gatewayProxies.gatewayProxy.readConfig|bool|false|expose a read-only subset of the envoy admin api|
|gatewayProxies.gatewayProxy.extraProxyVolumeMountHelper|string||name of custom made named template allowing for extra volume mounts on the proxy container|
|ingress.enabled|bool|false||
|ingress.deployment.image.tag|string|<release_version, ex: 1.2.3>|tag for the container|
|ingress.deployment.image.repository|string|ingress|image name (repository) for the container.|
|ingress.deployment.image.registry|string||image prefix/registry e.g. (quay.io/solo-io)|
|ingress.deployment.image.pullPolicy|string||image pull policy for the container|
|ingress.deployment.image.pullSecret|string||image pull policy for the container |
|ingress.deployment.replicas|int|1|number of instances to deploy|
|ingress.deployment.customEnv[].name|string|||
|ingress.deployment.customEnv[].value|string|||
|ingress.deployment.customEnv[].valueFrom.fieldRef.apiVersion|string|||
|ingress.deployment.customEnv[].valueFrom.fieldRef.fieldPath|string|||
|ingress.deployment.customEnv[].valueFrom.resourceFieldRef.containerName|string|||
|ingress.deployment.customEnv[].valueFrom.resourceFieldRef.resource|string|||
|ingress.deployment.customEnv[].valueFrom.resourceFieldRef.divisor|int64|||
|ingress.deployment.customEnv[].valueFrom.resourceFieldRef.divisor|int32|||
|ingress.deployment.customEnv[].valueFrom.resourceFieldRef.divisor|bool|||
|ingress.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|uint|||
|ingress.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|int32|||
|ingress.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|string|||
|ingress.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|string|||
|ingress.deployment.customEnv[].valueFrom.configMapKeyRef.name|string|||
|ingress.deployment.customEnv[].valueFrom.configMapKeyRef.key|string|||
|ingress.deployment.customEnv[].valueFrom.configMapKeyRef.optional|bool|||
|ingress.deployment.customEnv[].valueFrom.secretKeyRef.name|string|||
|ingress.deployment.customEnv[].valueFrom.secretKeyRef.key|string|||
|ingress.deployment.customEnv[].valueFrom.secretKeyRef.optional|bool|||
|ingress.deployment.resources.limits.memory|string||amount of memory|
|ingress.deployment.resources.limits.cpu|string||amount of CPUs|
|ingress.deployment.resources.requests.memory|string||amount of memory|
|ingress.deployment.resources.requests.cpu|string||amount of CPUs|
|ingress.requireIngressClass|bool||only serve traffic for Ingress objects with the Ingress Class annotation 'kubernetes.io/ingress.class'. By default the annotation value must be set to 'gloo', however this can be overriden via customIngressClass.|
|ingress.customIngressClass|bool||Only relevant when requireIngressClass is set to true. Setting this value will cause the Gloo Ingress Controller to process only those Ingress objects which have their ingress class set to this value (e.g. 'kubernetes.io/ingress.class=SOMEVALUE').|
|ingressProxy.deployment.image.tag|string|<release_version, ex: 1.2.3>|tag for the container|
|ingressProxy.deployment.image.repository|string|gloo-envoy-wrapper|image name (repository) for the container.|
|ingressProxy.deployment.image.registry|string||image prefix/registry e.g. (quay.io/solo-io)|
|ingressProxy.deployment.image.pullPolicy|string||image pull policy for the container|
|ingressProxy.deployment.image.pullSecret|string||image pull policy for the container |
|ingressProxy.deployment.httpPort|int|80|HTTP port for the ingress container|
|ingressProxy.deployment.httpsPort|int|443|HTTPS port for the ingress container|
|ingressProxy.deployment.extraPorts[]|interface|||
|ingressProxy.deployment.extraAnnotations.NAME|string|||
|ingressProxy.deployment.replicas|int|1|number of instances to deploy|
|ingressProxy.deployment.customEnv[].name|string|||
|ingressProxy.deployment.customEnv[].value|string|||
|ingressProxy.deployment.customEnv[].valueFrom.fieldRef.apiVersion|string|||
|ingressProxy.deployment.customEnv[].valueFrom.fieldRef.fieldPath|string|||
|ingressProxy.deployment.customEnv[].valueFrom.resourceFieldRef.containerName|string|||
|ingressProxy.deployment.customEnv[].valueFrom.resourceFieldRef.resource|string|||
|ingressProxy.deployment.customEnv[].valueFrom.resourceFieldRef.divisor|int64|||
|ingressProxy.deployment.customEnv[].valueFrom.resourceFieldRef.divisor|int32|||
|ingressProxy.deployment.customEnv[].valueFrom.resourceFieldRef.divisor|bool|||
|ingressProxy.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|uint|||
|ingressProxy.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|int32|||
|ingressProxy.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|string|||
|ingressProxy.deployment.customEnv[].valueFrom.resourceFieldRef.divisor[]|string|||
|ingressProxy.deployment.customEnv[].valueFrom.configMapKeyRef.name|string|||
|ingressProxy.deployment.customEnv[].valueFrom.configMapKeyRef.key|string|||
|ingressProxy.deployment.customEnv[].valueFrom.configMapKeyRef.optional|bool|||
|ingressProxy.deployment.customEnv[].valueFrom.secretKeyRef.name|string|||
|ingressProxy.deployment.customEnv[].valueFrom.secretKeyRef.key|string|||
|ingressProxy.deployment.customEnv[].valueFrom.secretKeyRef.optional|bool|||
|ingressProxy.deployment.resources.limits.memory|string||amount of memory|
|ingressProxy.deployment.resources.limits.cpu|string||amount of CPUs|
|ingressProxy.deployment.resources.requests.memory|string||amount of memory|
|ingressProxy.deployment.resources.requests.cpu|string||amount of CPUs|
|ingressProxy.configMap.data.NAME|string|||
|ingressProxy.tracing|string|||
|ingressProxy.service.type|string|LoadBalancer|K8s service type|
|ingressProxy.service.extraAnnotations.NAME|string||extra annotations to add to the service|
|k8s.clusterName|string|cluster.local|cluster name to use when referencing services.|
|accessLogger.image.tag|string|<release_version, ex: 1.2.3>|tag for the container|
|accessLogger.image.repository|string|access-logger|image name (repository) for the container.|
|accessLogger.image.registry|string||image prefix/registry e.g. (quay.io/solo-io)|
|accessLogger.image.pullPolicy|string||image pull policy for the container|
|accessLogger.image.pullSecret|string||image pull policy for the container |
|accessLogger.port|uint|8083||
|accessLogger.serviceName|string|AccessLog||
|accessLogger.enabled|bool|false||
|accessLogger.stats.enabled|bool|true|Controls whether or not prometheus stats are enabled|
|accessLogger.replicas|int|1|number of instances to deploy|
|accessLogger.customEnv[].name|string|||
|accessLogger.customEnv[].value|string|||
|accessLogger.customEnv[].valueFrom.fieldRef.apiVersion|string|||
|accessLogger.customEnv[].valueFrom.fieldRef.fieldPath|string|||
|accessLogger.customEnv[].valueFrom.resourceFieldRef.containerName|string|||
|accessLogger.customEnv[].valueFrom.resourceFieldRef.resource|string|||
|accessLogger.customEnv[].valueFrom.resourceFieldRef.divisor|int64|||
|accessLogger.customEnv[].valueFrom.resourceFieldRef.divisor|int32|||
|accessLogger.customEnv[].valueFrom.resourceFieldRef.divisor|bool|||
|accessLogger.customEnv[].valueFrom.resourceFieldRef.divisor[]|uint|||
|accessLogger.customEnv[].valueFrom.resourceFieldRef.divisor[]|int32|||
|accessLogger.customEnv[].valueFrom.resourceFieldRef.divisor[]|string|||
|accessLogger.customEnv[].valueFrom.resourceFieldRef.divisor[]|string|||
|accessLogger.customEnv[].valueFrom.configMapKeyRef.name|string|||
|accessLogger.customEnv[].valueFrom.configMapKeyRef.key|string|||
|accessLogger.customEnv[].valueFrom.configMapKeyRef.optional|bool|||
|accessLogger.customEnv[].valueFrom.secretKeyRef.name|string|||
|accessLogger.customEnv[].valueFrom.secretKeyRef.key|string|||
|accessLogger.customEnv[].valueFrom.secretKeyRef.optional|bool|||
|accessLogger.resources.limits.memory|string||amount of memory|
|accessLogger.resources.limits.cpu|string||amount of CPUs|
|accessLogger.resources.requests.memory|string||amount of memory|
|accessLogger.resources.requests.cpu|string||amount of CPUs|
|global.image.tag|string||tag for the container|
|global.image.repository|string||image name (repository) for the container.|
|global.image.registry|string|quay.io/solo-io|image prefix/registry e.g. (quay.io/solo-io)|
|global.image.pullPolicy|string|IfNotPresent|image pull policy for the container|
|global.image.pullSecret|string||image pull policy for the container |
|global.extensions|interface|||
|global.glooRbac.create|bool|true|create rbac rules for the gloo-system service account|
|global.glooRbac.namespaced|bool|false|use Roles instead of ClusterRoles|
|global.glooRbac.nameSuffix|string||When nameSuffix is nonempty, append '-$nameSuffix' to the names of Gloo RBAC resources; e.g. when nameSuffix is 'foo', the role 'gloo-resource-reader' will become 'gloo-resource-reader-foo'|
|global.wasm.enabled|bool|false|switch the gateway-proxy image to one which supports WASM|
|global.glooStats.enabled|bool|true|Controls whether or not prometheus stats are enabled|
|global.glooMtls.enabled|bool|false|Enables internal mtls authentication|
|global.glooMtls.sds.image.tag|string|<release_version, ex: 1.2.3>|tag for the container|
|global.glooMtls.sds.image.repository|string|sds|image name (repository) for the container.|
|global.glooMtls.sds.image.registry|string||image prefix/registry e.g. (quay.io/solo-io)|
|global.glooMtls.sds.image.pullPolicy|string||image pull policy for the container|
|global.glooMtls.sds.image.pullSecret|string||image pull policy for the container |
|global.glooMtls.envoy.image.tag|string|<release_version, ex: 1.2.3>|tag for the container|
|global.glooMtls.envoy.image.repository|string|gloo-envoy-wrapper|image name (repository) for the container.|
|global.glooMtls.envoy.image.registry|string||image prefix/registry e.g. (quay.io/solo-io)|
|global.glooMtls.envoy.image.pullPolicy|string||image pull policy for the container|
|global.glooMtls.envoy.image.pullSecret|string||image pull policy for the container |
