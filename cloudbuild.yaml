steps:

# clones Gloo Edge so it can be setup & tested
# All steps after this must set working directory to use the cloned Gloo Edge source

# $COMMIT_SHA is a default gcloud env var, to run via cloudbuild submit use:
# gcloud builds submit --substitutions COMMIT_SHA=<commit sha>,REPO_NAME=solo-io/gloo,_PR_NUM=<<insert PR Number here>> --project solo-public
- name: 'gcr.io/$PROJECT_ID/prepare-go-workspace:0.3.0'
  args:
    - "--repo-name"
    - "$REPO_NAME"
    - "--repo-sha"
    - "$COMMIT_SHA"
    - "--repo-output-dir"
    - "."
  env:
    - 'GIT_SSH_CONFIG=FALSE'
  id: 'prepare-workspace'

- name: 'gcr.io/cloud-builders/wget'
  entrypoint: ./ci/spell.sh
  args: ['check']
  dir: &dir '/workspace/gloo'
  env:
  # The LSCOMMAND is the env var which tells the spell script how to search for the files it needs to fix.
  - 'LSCOMMAND=find * -type f | grep -v vendor | grep -v docs/themes | grep -v docs/site'
  id: 'check-spelling'

- name: gcr.io/cloud-builders/gsutil
  entrypoint: 'bash'
  args: ['-c', 'mkdir -p /go/pkg && cd /go/pkg && gsutil cat gs://$PROJECT_ID-cache/gloo/gloo-mod.tar.gz | tar -xzf - || echo "untar mod cache failed; continuing because we can download deps as we need them"']
  dir: *dir
  id: 'untar-mod-cache'

# Run all the tests with ginkgo -r -failFast -trace -progress --noColor
# This requires setting up envoy, AWS, helm, and docker
# The e2e-go-mod-ginkgo container provides everything else needed for running tests
- name: 'gcr.io/$PROJECT_ID/go-mod-make:0.4.9'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    ENVOY_VERSION=v$$(make print-ENVOY_GLOO_IMAGE | cut -d: -f2)
    gsutil cp gs://solo-public-artifacts.solo.io/envoy/$$ENVOY_VERSION/envoy.stripped /workspace/envoy
    chmod +x /workspace/envoy
  dir: *dir
  waitFor: ['prepare-workspace']
  id: 'get-envoy'

- name: 'gcr.io/$PROJECT_ID/go-mod-make:0.4.9'
  entrypoint: 'bash'
  args: ['-c', 'make proxycontroller']
  dir: '/workspace/gloo/example/proxycontroller'
  id: 'build-proxycontroller-example'

- name: gcr.io/cloud-builders/gcloud
  args:
  - kms
  - decrypt
  - --ciphertext-file=./ci/aws_credentials.enc
  - --plaintext-file=/workspace/aws_credentials
  - --location=global
  - --keyring=build
  - --key=build-key
  dir: *dir
  waitFor: ['prepare-workspace']
  id: 'setup-aws-creds'

# Docker related setup
# grab this container immediately in parallel
- name: 'gcr.io/$PROJECT_ID/e2e-go-mod-ginkgo:0.2.1'
  entrypoint: ls
  waitFor: ['-']
  id: 'grab-ginkgo-container'

- name: gcr.io/cloud-builders/gcloud
  args: ['config', 'set', 'compute/zone', 'us-central1-a']
  id: 'set-gcr-zone'

- name: gcr.io/cloud-builders/gcloud
  args: ['container', 'clusters', 'get-credentials', 'test-cluster-roles']
  waitFor: ['set-gcr-zone']
  id: 'get-test-credentials'

- name: 'gcr.io/$PROJECT_ID/go-mod-make:0.4.9'
  args: ['install-go-tools']
  dir: *dir
  id: 'install-go-tools'

- name: 'gcr.io/$PROJECT_ID/e2e-go-mod-ginkgo:0.2.1'
  entrypoint: make
  env:
  - 'ENVOY_BINARY=/workspace/envoy'
  - 'AWS_SHARED_CREDENTIALS_FILE=/workspace/aws_credentials'
  - 'RUN_KUBE_TESTS=1'
  - 'RUN_CONSUL_TESTS=1'
  - 'RUN_VAULT_TESTS=1'
  - 'DOCKER_CONFIG=/workspace/.docker/'
  - 'TAGGED_VERSION=$TAG_NAME'
  dir: *dir
  args: ['run-tests']
  waitFor: ['get-envoy', 'setup-aws-creds', 'set-gcr-zone', 'get-test-credentials', 'install-go-tools']
  secretEnv: ['AWS_ARN_ROLE_1', "AWS_ROLE_ARN_STS", "JWT_PRIVATE_KEY"]
  id: 'test'

# Log into quay.io
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  env:
  - 'DOCKER_CONFIG=/workspace/docker-config'
  args: ['-c', 'docker login quay.io --username "solo-io+solobot" --password $$QUAY_IO_PASSWORD']
  secretEnv: ['QUAY_IO_PASSWORD']
  waitFor: ['prepare-workspace']
  id: 'docker-login'

  # 1) Run make targets to push docker images to quay.io
- name: 'gcr.io/$PROJECT_ID/go-mod-make:0.4.9'
  args: ['docker-push-extended']
  env:
  - 'DOCKER_CONFIG=/workspace/docker-config'
  - 'TAGGED_VERSION=$TAG_NAME'
  - 'TEST_ASSET_ID=$_PR_NUM'
  dir: *dir
  secretEnv: ['GITHUB_TOKEN']
  waitFor: ['docker-login']
  id: 'docker-push-extended'

# 2) Publish helm chart, compile manifests, produce release artifacts, deploy docs
# isolating this portion of the release in order to force the manifest to be regenerated with the tagged version
- name: gcr.io/cloud-builders/gcloud
  args: ['auth', 'configure-docker']
  env:
    - 'DOCKER_CONFIG=/workspace/docker-config'
  dir: *dir
  waitFor: ['docker-push-extended']
  id: 'gcr-auth'

- name: 'gcr.io/$PROJECT_ID/go-mod-make:0.4.9'
  args: ['fetch-package-and-save-helm', 'render-manifests', 'upload-github-release-assets', 'push-chart-to-registry', '-B']
  env:
    - 'DOCKER_CONFIG=/workspace/docker-config'
    - 'HELM_REPOSITORY_CACHE=/builder/home/.cache/helm/registry'
    - 'TAGGED_VERSION=$TAG_NAME'
    - 'TEST_ASSET_ID=$_PR_NUM'
    - 'GCLOUD_PROJECT_ID=$PROJECT_ID'
  dir: *dir
  secretEnv: ['GITHUB_TOKEN']
  waitFor: ['gcr-auth', 'test']
  id: 'release-chart'

# Run make targets to retag and push docker images to GCR
- name: 'gcr.io/$PROJECT_ID/go-mod-make:0.4.9'
  args: ['docker-push-extended']
  env:
  - 'DOCKER_CONFIG=/workspace/docker-config'
  - 'TAGGED_VERSION=$TAG_NAME'
  - 'TEST_ASSET_ID=$_PR_NUM'
  - 'IMAGE_REPO=gcr.io/gloo-edge'
  - 'RETAG_IMAGE_REGISTRY=quay.io/solo-io'
  dir: *dir
  secretEnv: ['GITHUB_TOKEN']
  waitFor: ['gcr-auth', 'set-gcr-zone', 'docker-push-extended']
  id: 'docker-push-extended-gcr'

secrets:
- kmsKeyName: projects/solo-public/locations/global/keyRings/build/cryptoKeys/build-key
  secretEnv:
    GITHUB_TOKEN: CiQABlzmSYYiveU0gTxGH2139eaBUedjV3vNCxQmJU+nRPlfQ/YSUQCCPGSGzbGp49fwDYuefAx9V94b8mivdp9AqB7zQAa07VtGJmrGdg9ZuhKGFrrgqxwABE0LLVNHyngCSHYSYMH8Vn/mRtT7wQuEHBlKVGtqPw==
    QUAY_IO_PASSWORD: CiQABlzmSRx5TcOqbldXa/d/+bkmAfpNAWa3PTS06WvuloZL+vASaQCCPGSGCogonVZVEUNx4G3YJtWi18gSuNx4PvLe08q8xAflTMFkjsyQirAOK3Y2oCvgYwiw/ITcuydjkpMjxDygFyENXS9FKFJoAXHlPQE5qidKr8xxmxF5ezhmjGB0gjyjXIIkbSEnBg==
    AWS_ARN_ROLE_1: CiQABlzmSTKWrIEGaH8UvsX3Wp8pz8ClQODVSjIZAiHuE9gNhM4SXACCPGSGCDSNJtdfkA0BLLmKTJLIM06XXEOV4iIooqlLfo9p7EOzOwqZaV9DFygO8/oKQqTFstc1vKgOz7YHrMaCx3GzqiHN2u//UmHRpvIwrDDfuIP5XNa0aOrj
    AWS_ROLE_ARN_STS: CiQABlzmSSlrnOwB0vjc2sO4MKDtKlJSwdRG9bKm3d71bWTr0pASWACCPGSGG0QI9jxYNG0xkNOe/Pd9gljDriaFtOhS5jp1NLc6IFB5grIlC4Pl7mIdmqKRFXyd3fXmWfdyT2natiMUuQ9SYfcVyaYumvp3DAHXRIaISirE5/8=
    JWT_PRIVATE_KEY: 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

timeout: 5400s
tags: ['gloo']
options:
  machineType: 'N1_HIGHCPU_32'
  volumes:
  - name: 'gopath'
    path: '/go'
